DOUBLY LINKED LISTS: CONCEPTUAL
Doubly Linked Lists Introduction
Like a singly linked list, a doubly linked list is comprised of a series of nodes. Each node contains data and two links (or pointers) to the next and previous nodes in the list. The head node is the node at the beginning of the list, and the tail node is the node at the end of the list. The head node’s previous pointer is set to null and the tail node’s next pointer is set to null.

Think of your daily commute on the subway as a real-world example of a doubly linked list. Your home is the head of the list, your place of work is the tail, and every stop in between is another node in the list. In the morning when you take the subway to get to work, you are traversing the list from the head to the tail, using the stop’s next pointer. While this can also be done using a singly linked list, a doubly linked list will also allow you to traverse back through the list easily, using the stop’s previous pointer. You will take the exact same route to get home, just in reverse.

Common operations on a doubly linked list may include:

adding nodes to both ends of the list
removing nodes from both ends of the list
finding, and removing, a node from anywhere in the list
traversing (or traveling through) the list




Doubly Linked Lists Review
Let’s take a minute to review what we’ve covered about doubly linked lists in this lesson. Doubly Linked Lists:

Are comprised of nodes that contain links to the next and previous nodes
Are bidirectional, meaning it can be traversed in both directions
Have a pointer to a single head node, which serves as the first node in the list
Have a pointer to a single tail node, which serves as the last node in the list
Require the pointers at the head of the list to be updated after addition to or removal of the head
Require the pointers at the tail of the list to be updated after addition to or removed of the tail
Require the pointers of the surrounding nodes to be updated after removal from the middle of the list
Your browser history is another example of a doubly linked list. When you open your browser, the page that you land on is the head of your list. As you click on things and navigate to new pages, you are moving forward and adding to the tail of your list. If you ever want to go back to something you’ve already visited, you can use the “back” button to move backward through your list. Can you think of another computer use case for a doubly linked list?





Add To Tail
Since doubly linked lists have a tail property, we don’t have to iterate through the entire list to add to the tail like we did with a singly linked list. The new method will mirror what we did in our .addToHead() method:

Start by checking to see if there is a current tail to the list
If there is (meaning the list is not empty), then we want to reset the pointers at the tail of the list:
Set the current tail’s next node to the new tail
Set the new tail’s previous node to the current tail
Update the tail property to be the new tail
Finally, if there isn’t a current head to the list (meaning the list was empty):
Update the head property to be the new tail since that node will be both the head and tail
Instructions
Checkpoint 1 Passed
1.
Define an .addToTail() method that takes one parameter called data. Inside, create:

A Node const variable named newTail that takes data as an argument
A const variable named currentTail, and set it equal to the list’s tail

Stuck? Get a hint
Checkpoint 2 Passed
2.
If there is a current tail to the list:

Set the current tail’s next node to newTail
Set newTail‘s previous node to the current tail
Remember to use the Node class’s .setNextNode() and .setPreviousNode() methods.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Outside your if, set the list’s tail to the new tail.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Lastly, if the list doesn’t have a head, set the list’s head to the new tail.




