BINARY SEARCH TREES: JAVASCRIPT
Inserting a Value
When inserting a new value into a binary tree, we compare it with the root node’s value:

If the new value is less than the root node's value
  If a left child node doesn't exist 
    Create a new BinaryTree with the new value at a greater depth and assign it to the left pointer
  Else
    Recursively call .insert() on the left child node  
Else
  If a right child node doesn't exist
    Create a new BinaryTree with the new value at a greater depth and assign it to a right pointer
  Else
    Recursively call .insert() on the right child node
Let’s illustrate the insertion procedure with a tree whose root node has the data 100.

Insert 50
50 < 100, left child node doesn't exist, create a left child node
       100
       /
     50 
Insert 125
125 > 100, right child node doesn't exist, create a right child node
        100
       /   \
      50    125
Insert 75
75 < 100, left child node of 50 exists, recursive insert at left child
75 > 50, right child node doesn't exist, create a right child node
        100
       /   \
      50    125
       \
       75 
Insert 25
25 < 100, left child node of 50 exists, recursive insert at left child
25 < 50, left child node doesn't exist, create a left child node
        100
       /   \
      50    125
     /  \
    25  75
Instructions
Checkpoint 1 Passed
1.
Define a method, .insert(), with a parameter, value, below the constructor.

Checkpoint 2 Passed
2.
We want to know where to place the target value. If the target value is less than the root node’s value, we will need to place it in a left child node. Before doing so, we need to check if a left child node already exists. If so, we will call the .insert() method for the left child node. If not, we will add another level to our binary tree by creating a left binary tree with the target value and a new depth.

Write an outer if else statement block.

The if statement should check if the target value is less than the root node’s value.
The else statement should be left blank for now.
Inside the outer if statement block, write an inner if else statement block.

The if statement should check if a left child node exists
If it exists, call its .insert() method passing on value
If it doesn’t exist, instantiate a BinaryTree with the target value and a new depth and assign it to the left pointer
The else statement should be left blank for now.

Stuck? Get a hint
Checkpoint 3 Passed
3.
Alternatively, if the target value is not less than the root node’s value, then we will place it in the right child node. Before doing so, we need to check if a right child node already exists. If so, we will call the .insert() method of the right child node. If not, we will add another level to our binary tree by creating a right binary tree with the target value and a new depth.

Inside the outer else statement block from the previous step, write an if statement that checks if a right child node exists
If it exists, call its .insert() method passing on value
If it doesn’t exist, instantiate a BinaryTree with the target value and a new depth and assign it to the right pointer
Checkpoint 4 Passed
4.
Open up script.js. A default BinaryTree has been created for you with an initial value of 100. Insert the following values to the tree in this order:

50
125
75
25
Display the content of this tree and study the terminal output. The result should match the tree illustration in the lesson.