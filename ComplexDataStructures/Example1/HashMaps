LEARN HASH MAPS: JAVASCRIPT
Intro to Hash Maps
Hash maps are data structures that serve as efficient key-value stores. They are capable of assigning and retrieving data in the fastest way possible. This is because the underlying data structure that hash maps use is an array.

A value is stored at an array index determined by plugging the key into a hash function. Because we always know exactly where to find values in a hash map, we have constant access to any of the values it contains.

This quick access to values makes a hash map a good choice of data structure whenever we need to store a lot of values but need fast look-up time.

In JavaScript, objects are often used to map keys to values as in a hash map, but in this lesson, you’ll create your own implementation of a hash map by building out a HashMap class. You’ll build methods to hash and compress a given key, assign an index at which to store a value, and retrieve that value.

To implement a hash map, the HashMap constructor method will create an empty array that will hold values. A hashing function will return an index in the array where the value will be stored. While going through the following exercises, remember that the purpose of this lesson is to gain a deeper understanding of the data structure rather than creating a production-quality data structure.

Instructions
Checkpoint 1 Passed
1.
The hash map class we will be completing is stored in the HashMap.js file. Look over the code you’ve been given, the constructor method.

Hash maps are based on arrays, so whenever we create a new hash map instance, we’ll create an array filled with null values that can be replaced with key-value pairs later.




Hashing
The hashing function is the secret to efficiently storing and retrieving values in a hash map. A hashing function takes a key as input and returns an index within the hash map’s underlying array.

This function is said to be deterministic. That means the hashing function must always return the same index when given the same key. This is important because we will need to hash the key again later to retrieve the stored value. We won’t be able to do this unless our hashing function behaves in a predictable and consistent way.

Getting an integer representing an index can be done by summing up each character code of the key (as a numeric value) with the running total of the previously summed character codes.

The hashing function should follow this logic:

declare hashCode variable with value of 0

for each character in the key
  add the sum of the current character code value and hashCode to hashCode

return hashCode
Adding the sum of hashCode and the character code to the hashCode again creates a deterministic and also non-reversible implementation of a hashing function. This avoids generating a duplicate index if keys have the same characters in different orders, such as bat and tab.

Instructions
Checkpoint 1 Passed
1.
Create a HashMap method, .hash(), with key as a parameter. This method will take a string and use it to generate an index in the hash map’s internal array.

Checkpoint 2 Passed
2.
To generate an index for each key-value pair, we’ll calculate a number based on the characters in the input string. Declare a variable whose value can be changed within .hash() called hashCode. Assign it an initial value of 0.

This variable will keep a running total of character codes.


Stuck? Get a hint
Checkpoint 3 Passed
3.
After declaring hashCode, create a for loop that loops through each index of key.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Inside of the for loop convert each character in key to an integer using the JavaScript string method .charCodeAt().

This method only works on strings and converts a character at a specific index into an integer between 0 and 65535. This integer represents the equivalent Unicode value of that character.

To use .charCodeAt() call it on a string with the index of the character you want the character code of:

// The code below will return the character code of 'H'
'Hello world!'.charCodeAt(0) // => 72

Add the result of calling .charCodeAt() on the current character of key and hashCode to the hashCode variable.

Outside of the for loop, return the finished hashCode.




Compression
The current hashing function will return a wide range of integers — some of which are not indices of the hash map array. To fix this, we need to use compression.

Compression means taking some input and returning an output only within a specific range.

In our hash map implementation, we’re going to have our hashing function handle compression in addition to hashing. This means we’ll add an additional line of code to compress the hashCode before we return it.

The updated .hash() should follow these steps:

initialize hashCode variable to 0

for each character in the key
   add the character code and hashCode to hashCode

return compressed hashCode
Instructions
Checkpoint 1 Passed
1.
Currently, our .hash() method is generating an integer representing an index but it’s not guaranteed that this index will be within the bounds of the hash map’s array.

To do this, we’ll use modular arithmetic. Because modular arithmetic prevents a value from growing larger than some limit, it’s a common solution when we want a value to “wrap around”.

After the for loop in the .hash() of HashMap, compress the value stored in hashCode by using modular arithmetic to return the remainder of dividing hashCode by the length of the hash map.


Hint
The modulo operator, %, in JavaScript returns the remainder when dividing two numbers.

For example:

11 % 2 // => 1

Checkpoint 2 Passed
2.
Check your work. Save a new HashMap instance with a size of 3, in a constant myHashMap and use the new .hash() to log the result of hashing the key 'id'. Hash and log 'id' again. Are the logged values the same or are they different?




Assign
We now have everything we need to find a place in the hash map array to store a value. The only thing left to do is assign the value to the index we generated. A method, .assign() will handle the logic needed to take in a key-value pair and store the value at a particular index.

A general outline of how .assign() will work is this:

store the hashed key in a variable arrayIndex
assign the value to the element at arrayIndex in the hash map
Instructions
Checkpoint 1 Passed
1.
Declare a HashMap method called .assign() with the parameters key and value.

Checkpoint 2 Passed
2.
Declare a constant called arrayIndex with the value of the hashed and compressed key.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Assign the value to the element at the index you derived from hashing, arrayIndex.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Check your work. At the bottom of the HashMap.js file store a new instance of HashMap with a size of 3 in a constant named employees. Assign employees the key-value pair '34-567' and 'Mara', then log the hash map.




Collisions
We have a hash map implementation, but what happens when two different keys generate the same index? Run the code in collision.js to see a collision in action.

Instead of returning 'marsh plant' and 'forest animal' we retrieve 'forest animal' twice. This is because both key-value pairs are assigned to the same index 0 and the first value, 'marsh plants' was overwritten.

When two different keys resolve to the same array index this is called a collision. In our current implementation, all keys that resolve to the same index are treated as if they are the same key. This is a problem because they will overwrite one another’s values.

Instructions
Checkpoint 1 Passed
1.
Run the code in the text editor to see the result of a collision between two keys.




Collisions: Assigning
Our first step in implementing a collision strategy is updating our constructor and .assign() method to use linked lists and nodes inside the hashmap array. This will allow us to store multiple values at the same index by adding new nodes to a linked list instead of overwriting a single value. This strategy of handling collisions is called separate chaining.

A collision-proof .assign() should look like this to start:

store the hashed key in a variable arrayIndex
store linked list at arrayIndex in a variable linkedList

if linked list is empty
  add the key-value pair to the linked list as a node
We’ll be using the LinkedList and Node classes found in the LinkedList.js and Node.js files to implement our collision-proof HashMap class. The only file you will be working in for this exercise is HashMap.

Instructions
Checkpoint 1 Passed
1.
Instead of an empty array, new hash maps will have an internal array filled with empty linked lists.

Tab to HashMap.js, and replace the code in the constructor method with the following:

this.hashmap = new Array(size)
     .fill(null)
     .map(() => new LinkedList());

Note the Array methods .fill() and .map() that are used to fill the array with placeholder values of null which are then replaced by empty linked lists.


Stuck? Get a hint
Checkpoint 2 Passed
2.
Declare another constant in .assign() called linkedList with the value at arrayIndex in the hash map array.

This new constant linkedList will reference the linked list we want to add a value to.


Stuck? Get a hint
Checkpoint 3 Passed
3.
If the linked list at arrayIndex is empty, we should add the key-value pair to the list. The key-value pair should be stored in a node and become the head of the linked list before exiting the code.

A key-value pair can be stored in a node’s data property as an object with key and value properties:

{key: 'deer', value: 'forest animal'}

Data can be stored when the node is created by passing data to the Node constructor or it can be assigned to the data property later with dot notation and chaining.

// Using the Node constructor
const first = new Node({'someKey', 'someValue'});

// Using dot notation and chaining 
const second = new Node();
second.data.key = 'someKey';
second.data.value = 'someValue';

Add an if statement that checks if the linked list head exists. If it doesn’t exist, add the key-value pair as the head of the list.


Hint
Look at the properties and methods available to you in LinkedList.js that allows you to add a head node with data to a linked list.

Checkpoint 4 Passed
4.
Finally, if the key-value pair has been added as the head node of the linked list we can exit the code. Inside the if statement use the return keyword to exit out of the code.

(This is important because we will be using a loop to finish .assign() and we want to avoid an infinite loop.)




Collisions: Looping
We’ve added code to .assign() that takes care of an empty list, but what happens when there is a collision and there are already values stored at a particular index?

If there are already values stored in nodes at an index, we need to loop over each node in the list in order to determine how to proceed.

The two possibilities we’ll encounter while looping are:

The key we are looking for and the key of the current node is the same, so we should overwrite the value

No node in the linked list matches the key, so we should add the key-value pair to the list as the tail node

After both cases, if we haven’t already exited the loop, we should reset the loop’s condition.

With this in mind, the .assign() code for looping should look like this:

store the head node of the linked list in a variable current

while there is a current node
  if the current node's key is the same as the key
    store the key and value in current
  if the current node is the tail node
    store the key-value pair in the node after current
    exit the loop      
  set current to the next node
Instructions
Checkpoint 1 Passed
1.
After the if statement in .assign() that checks for a head node, declare a variable that can be changed, current. Store the head node of the linked list in current.

We’ll use current to begin iterating over the linked list until we find the tail node.


Stuck? Get a hint
Checkpoint 2 Passed
2.
After declaring current in .assign(), iterate over the linked list to find the tail using a while loop.

While we haven’t visited all the nodes in a linked list, we should keep looping. Set the while loop condition to continue while current isn’t null.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Key-value pairs are stored in the data property of nodes. (To review how nodes are implemented, see the code for the Node class in Node.js.)

There are two possibilities when iterating over nodes:

The current key and the node’s key are the same, and we should overwrite the node’s value with the current value
The current key and the node’s key aren’t the same and we should check if there are more nodes in the linked list
Add an if statement in the while loop that does a strict equality check of the current node’s .key and key. If the two keys are the same, overwrite the current node’s key and value properties with the key-value pair we want to store.


Hint
Nodes have a .data property that can be used to store a key-value pair in an object.

// You can reassign the data property with a literal
node.data = {key, value};

// Or dot notation
node.data.key = key;
node.data.value = value;

Checkpoint 4 Passed
4.
Each node knows the node after it. We can use this to determine the tail of the linked list.

Outside of the last if statement, write a condition that checks if the current node is the tail node. Check what Node methods are available to you in the Node.js file.


Stuck? Get a hint
Checkpoint 5 Passed
5.
If the current node is the end of the linked list, there are no more nodes to loop over and check for a matching key.

Inside the if condition that checks for a tail node, set the next node after current to a new node with the key-value pair stored in it. (Check the Node.js file to see what methods are available to you to do this.) Then break out of the while loop.


Hint
Nodes have methods that allow us to interact with the next node in a linked list.

// The next node can be set by passing in a new node
const lastNode = new Node({ key, value });
currentNode.setNextNode(lastNode);

Checkpoint 6 Passed
6.
If we don’t reach the end of the linked list on this iteration, we need to check the next node.

Outside of the last if statement in the while loop set current to the next node in the linked list to continue the loop. Use the Node method that gets the next node in a linked list.




Collisions: Retrieving
When we retrieve hash map values, we also need to be aware that different keys could point to the same array index leading us to retrieve the wrong value.

To avoid this, we’ll search through the linked list at an index until we find a node with a matching key. If we find the node with the correct key, we’ll return the value; otherwise, we’ll return null.

The .retrieve() method will follow this logic:

store the hashed key in the constant arrayIndex
store the head node of a list in the variable current

while there is a valid node
  if the current node's key matches the key
    return the current node's value
  set current to the next node in the list

return null
Instructions
Checkpoint 1 Passed
1.
In .retrieve(), declare a variable whose value can be changed, current. Assign it the head node of the linked list at arrayIndex to current.

We will search for the value we want to retrieve by checking each node in the linked list, starting at the head node.


Stuck? Get a hint
Checkpoint 2 Passed
2.
Create a while loop that we’ll use to iterate over each node in the linked list until we either find the value we’re looking for or reach the end of the list.

Set the while condition to be the current node of the linked list.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Inside of the while loop, add an if statement that checks if the key we received as an argument and the key of the current node are the same.

If both keys are the same, this means we’ve found the node with the correct value. Return the value stored in the current node.


Stuck? Get a hint
Checkpoint 4 Passed
4.
If the keys don’t match, we need to check the next node in the linked list. Outside of the if statement, set current to the next node in the linked list.


Stuck? Get a hint
Checkpoint 5 Passed
5.
If we’ve looped through the entire linked list without finding the value we want to retrieve, it means the value is not stored in the hash map. After the while loop, return null.