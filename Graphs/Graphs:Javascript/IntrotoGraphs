GRAPHS: JAVASCRIPT
Introduction to Graphs
In this lesson, we’ll take an object-oriented approach to build an implementation of the graph data structure in JavaScript. With three classes, Edge, Vertex, and Graph, we can implement a variety of graphs that satisfy the requirements of many algorithms. Remember that a Graph consists of vertices and their corresponding edges.

For this lesson, we want our Graph class to be flexible enough to support directed, undirected, weighted, and unweighted graphs. We will provide you with an Edge class that connects two vertices, along with the weight of the connection (to support weighted graphs).

With this in mind, we will create our Graph with the following requirements:

A Vertex can store any data.

A Vertex maintains a list of connections to other vertices, represented by a list of Edge instances.

A Vertex can add and remove edges going to another Vertex.

A Graph stores all of its vertices, represented by a list of Vertex instances.

A Graph knows if it is directed or undirected.

A Graph knows if it is weighted or unweighted.

A Graph can add and remove its own vertices.

A Graph can add and remove edges between stored vertices.

Let’s start with familiarizing ourselves with the classes that we will build in Vertex.js and Graph.js. We already set up .print() methods for you that will print out the state of the graph structure. Don’t worry about the class in Edge.js yet. We will use it to connect the vertices in a later exercise.

To keep the concepts grounded in a real-world application, we’ll build a transportation network of railroads and train stations as we go.

Instructions
Checkpoint 1 Passed
1.
Let’s start by setting up the constructor for our Vertex class. When a vertex is first created, it should hold any given data, and it should have an empty list of edges because it does not have any connections.

In the constructor, expect a data parameter and set it to the data class property. Then, set the edges class property to an empty array.


Stuck? Get a hint
Checkpoint 2 Passed
2.
Moving on to the constructor for our Graph class, a graph is essentially a collection of vertices and edges. Our graph only needs to keep track of a list of vertices.

In the Graph class in Graph.js, create a constructor that takes no parameters. Since a graph doesn’t have any vertices when it is first created, set the vertices property to an empty array in the constructor.




Adding Vertices
Now that we have set up our data structures, we can provide an easier way to manage the graph’s list of vertices. This gives us an opportunity to abstract out the places that use the Vertex class.

Currently, we would have to manually create a new Vertex instance and add it into the Graph’s list of vertices to populate the graph. If we create an .addVertex() method in the Graph class, it simplifies the process of adding a vertex to the graph. This alleviates the burden of knowing how the Vertex class should interact with the Graph class for whoever is using our Graph. They only need to interact with the Graph class.

Instructions
Checkpoint 1 Passed
1.
Inside the Graph class, add an .addVertex() method that expects a single parameter, data, which contains the data of vertex to create. Using this argument, create a Vertex instance and add it to the Graph’s list of vertices.

We will want to return the newly created Vertex to signal to the method caller that a vertex was successfully created and added to the list.


Stuck? Get a hint
Checkpoint 2 Passed
2.
Great! Now we can set up our train network graph and see what it looks like with our train station vertices.

Underneath the Graph class, create a Graph instance and assign it to the trainNetwork variable. Then use the .addVertex() method to add two train stations with the names, 'Atlanta' and 'New York'. Assign the newly created vertices to the variables atlantaStation and newYorkStation, respectively. We will use these variables later on.

Call the .print() method on the trainNetwork. We should see our graph with two vertices inside it. They should be labeled Atlanta and New York, respectively.




We also want our Graph to manage its own vertex removal, just like how it handles its own vertex creation.

We will use the .removeVertex() method to look for the requested vertex and remove it from the list of vertices.

Instructions
Checkpoint 1 Passed
1.
Inside the Graph class, implement the .removeVertex() method that accepts the vertex to be removed as a parameter. Iterate through the list of vertices and remove the vertex that is strictly equal to the vertex given in the parameter.


Stuck? Get a hint
Checkpoint 2 Passed
2.
Underneath our Graph class, let’s remove the Atlanta vertex we added in the previous exercise using the trainNetwork‘s .removeVertex() method. Remember to do it before the call to .print() so we can see what the resulting graph looks like.

We should see our graph with only the New York vertex remaining, and no edges.




Connecting Vertices with Edges
Since we can add vertices to our graph, we should be able to connect them together. We want to provide this functionality in the Graph class to add a layer of abstraction that will simplify adding edges, similar to how we abstracted vertex creation. This is where our Edge class in Edge.js will come in handy. Go ahead and take a look at the class.

The start and end properties mark the vertices that the edge connects. If the graph is directed, we can indicate the direction the edge points (towards the end vertex).

We will create an .addEdge() method in the Vertex class that connects the vertices together by creating an Edge and adding it to the vertices’ list of edges. When the Edge is created, it expects the two Vertex instances, which is how the Edge tracks the connection between the two vertices .

Then, we will use this method in the Graph‘s .addEdge() method to create edges going in both directions between the two given vertices. Even though this graph is undirected, we want to create two edges going in both directions so it is easier to traverse.

Instructions
Checkpoint 1 Passed
1.
In our Vertex class, create the .addEdge() method that expects a vertex parameter, which will represent the other end of the edge. It must be an instanceof a Vertex, otherwise we should throw an error. Then, create an Edge instance to represent the connection from this vertex to the ending vertex.

Add the Edge instance to the vertex’s list of edges to open up our first connection from one vertex to another.


Stuck? Get a hint
Checkpoint 2 Passed
2.
We’re ready to connect vertices with edges through our Graph class. In the Graph class, create an .addEdge() method, which will create edges between the parameters, vertexOne and vertexTwo.

If the parameters are both an instanceof a Vertex, use the vertices’ .addEdge() method to create an edge between the other vertex. Remember to add edges between both vertices.

Otherwise, throw an error if either of them are not.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Let’s verify that we can successfully create an edge between two vertices through the Graph class. Under the Graph class, there are two Vertex instances: atlantaStation and newYorkStation.

Before the trainNetwork is printed, use the trainNetwork’s .addEdge() method to create an edge between the two vertices. We should see Atlanta connect to New York, and New York connect to Atlanta.




Removing Vertex Connections
Now that we can connect vertices together, we want to make the Graph more flexible by giving it the ability to remove connections.

We will use the .removeEdge() method to remove any Edge between the given vertex instances.

Instructions
Checkpoint 1 Passed
1.
In our Vertex class, create the .removeEdge() method that expects an ending vertex parameter. In order to remove the edge that leads to the given vertex, iterate through its list of edges and filter out the Edge whose end property is strictly equal to the ending vertex.


Stuck? Get a hint
Checkpoint 2 Passed
2.
We’re ready to remove an edge between vertices through our Graph class. In the Graph class, create the .removeEdge() method that removes the edge between two given vertices.

It should expect the vertices as two parameters: vertexOne and vertexTwo. Throw an error if either of them are not Vertex instances. Then use the vertices’ .removeEdge() method to remove the edge between the other vertex. Remember to do this for both vertices.

Checkpoint 3 Passed
3.
Let’s verify that we can successfully remove an edge between two vertices through the Graph class. After the edge between Atlanta and New York is added, remove the edges between the two cities. Call the trainNetwork’s .removeEdge() with atlantaStation and newYorkStation.

We should see that the atlantaStation and newYorkStation vertices have no edge connections.




Weighted Graphs
The current implementation of our Graph class is unweighted, where there is no cost associated with the edge that connects the vertices together. Since we want our Graph to be flexible, we should give the option for weights to be added to the edge when a new edge is created.

Instructions
Checkpoint 1 Passed
1.
In the Graph class, add an isWeighted boolean parameter in the constructor for the user to designate that the graph is weighted. It should default to false if no argument is given.

Set the argument to the isWeighted class property.

Checkpoint 2 Passed
2.
In the Vertex class, add a second parameter for weight in the .addEdge() method. Pass the argument to the new Edge instance that will be created.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Next, we should feed in the weight argument to the calls to Vertex‘s .addEdge() method from the Graph‘s .addEdge() method if the graph is weighted.

In the Graph class, add a third parameter for weight in the .addEdge() method. Create a variable edgeWeight, and set it to the weight argument if the graph is weighted, otherwise set it to null. Pass edgeWeight to the calls that create edges between the given vertices. Remember to do this for both calls.

Checkpoint 4 Passed
4.
Let’s verify that the Graph can add weights to the edges by adding an edge between atlantaStation and newYorkStation. In Graph.js, edit trainNetwork to be weighted. Then call the its .addEdge() method and pass in a value of 800 as an argument, to represent the number of miles between the two train stations.

When we call the trainNetwork’s .print() method to print out the resulting graph, we should see that the edge between Atlanta and New York has a value of 800.




Directed Graphs
So far we have only built out support for undirected graphs. Next, we will focus on expanding our Graph class to be directed, where there does not necessarily have to be edges going in both directions between the vertices, as we have done with undirected graphs.

The main difference between the undirected graph and directed graph is that our undirected graph uses two edges going in opposite directions to indicate that there is a connection between two vertices.

Instructions
Checkpoint 1 Passed
1.
When a Graph is first created, we need a way to identify if it will be directed or not. In the constructor, add a parameter. This argument will be a boolean of whether or not the graph is directed. Store the isDirected argument in the Graph’s isDirected property. By default, isDirected should be set to false.


Stuck? Get a hint
Checkpoint 2 Passed
2.
We only want to create one edge that points in one direction between two vertices for directed graphs.

Modify the Graph‘s .addEdge() method to create the edge from vertexTwo to vertexOne only if this isDirected property is false.

Checkpoint 3 Passed
3.
Just as we only want to create one edge between vertices in a directed graph, we also want to remove only one edge between vertices.

Modify the Graph‘s .removeEdge() method to remove the edge from vertexTwo to vertexOne if this isDirected property is false.

Checkpoint 4 Passed
4.
Finally, let’s modify our train network to only travel in one direction: from New York to Atlanta. Modify the trainNetwork to be unweighted and directed. Pass false for the first argument and true for the second.

We should see only one edge connection going from Atlanta to New York. New York should have no edges going out.

Checkpoint 5 Passed
5.
Last, but not least, we should test out our edge removal. Call .removeEdge() on the trainNetwork graph to remove the edge between atlantaStation and newYorkStation.

When we print out the resulting graph, Atlanta and New York should have no connections.




Graph Review
Let’s put our Graph class to use and build out our train network. This time we will use it to map out all the train stations and routes that our rail service operates. We will also want to make sure that our routes can track the distance between each station.

For this exercise, we will build out the train network inside trainNetwork.js.

Instructions
Checkpoint 1 Passed
1.
Start by creating the train network as a weighted and directed Graph instance and assigning it to trainNetwork.

Checkpoint 2 Passed
2.
We just got funding to build out 6 train stations. Using the graph’s .addVertex() method, add the following station vertices to our trainNetwork with the names:

Los Angeles
San Francisco
New York
Atlanta
Denver
Calgary

Stuck? Get a hint
Checkpoint 3 Passed
3.
We only want to service the routes our customers will travel the most, so let’s use .addEdge() to add the following route edges to the graph:

From San Francisco to Los Angeles, which is 400mi
From Los Angeles to San Francisco, which is 400mi
From New York to Denver, which is 1800mi
From Denver to New York, which is 1800mi
From Calgary to Denver, which is 1000mi
From Denver to Calgary, which is 1000mi
From Los Angeles to Atlanta, which is 2100mi
From Atlanta to Los Angeles, which is 2100mi

Stuck? Get a hint
Checkpoint 4 Passed
4.
Darn! As we were building out our routes, there was a huge snowstorm that hit Calgary and New York. We were able to salvage the route from Denver to New York, but all of the routes to and from Calgary broke down.

Using the graph’s .removeEdge() and .removeVertex() methods, remove the route from New York to Denver, all the routes to and from Calgary, and the Calgary station.

Checkpoint 5 Passed
5.
We’re finally all aboard the same page. Print out our final graph and check that we built the following routes:

San Francisco to and from Los Angeles
Los Angeles to and from Atlanta
Denver to New York
This wraps up our graph implementation! There are still some edge (pardon the pun) cases that we have not yet accounted for. If you’re feeling up for it, try to challenge yourself with the following:

Currently, it is possible to add duplicate edges between two vertices. How will you improve this Graph implementation to avoid adding duplicate edges?
How would you iterate through a directed graph? What about an undirected graph?
How would you create a cycle with a directed graph?




