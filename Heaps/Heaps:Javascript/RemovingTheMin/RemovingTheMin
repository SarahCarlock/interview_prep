HEAPS: JAVASCRIPT
Removing the Min
Min-heaps would be useless if we couldn’t retrieve the minimum value. We’ve gone through a lot of work to maintain that value because we’re going to need it!

Our goal is to efficiently remove the minimum element from the heap. You’ll recall that we always locate the minimum element at index 1 (a placeholder element occupies index 0).

Our internal heap mirrors a binary tree. There’s a delicate balance of parent and child relationships we would ruin by directly removing the minimum.

console.log(minHeap.heap)
// [null, 10, 21, 13, 61, 22, 23, 99]
minHeap.popMin()
// 10
// [null, ???, 21, 13, 61, 22, 23, 99]

We need to remove an element that has no children, in this case, the last element. If we swap the minimum with the last element, we can easily remove the minimum from the end of the list.

[None, (10), 21, 13, 61, 22, 23, {99}]
minHeap.popMin()
SWAP minimum with last
[None, {99}, 21, 13, 61, 22, 23, (10)]
remove minimum
[None, 99, 21, 13, 61, 22, 23]
10
Terrific! We removed the minimum element with minimal disruption. Unfortunately, our heap is out of shape again with 99 sitting where the minimum element should be. We will solve this in exercises to come…

Instructions
Checkpoint 1 Passed
1.
To retrieve the minimum value of our heap, we need to define a class method.

Define .popMin() below the constructor within our MinHeap class.
Within .popMin(), check if our heap is empty. If it is, return null.

Hint
Use this.size to determine if our heap is empty.

Checkpoint 2 Passed
2.
Next, we want to:

exchange the last element of the heap with the minimum element at index 1 using .swap()
remove the last element from the heap, and save it in a const min variable
decrement the heap size.

Hint
To swap two elements with .swap() do the following:

const a = 5, b = 7;
this.swap(a, b);
console.log(a, b); // should return 7 5

To remove the last element from an array we use the .pop() method and assign it to a const variable as follows:

const myArray = [ 6, 3, 4 ];
const popped = myArray.pop(); // return 4

Checkpoint 3 Passed
3.
Display:

a message to show that the first element ${this.heap[1]} is swapped with the last element, ${this.heap[this.size]} (do this before the actual swap)
a message that shows that the minimum element has been removed followed by the content of the heap; use the stringRemove at the beginning of the message.

Hint
The message to show swapping between the first and last elements of the heap may look like this:

console.log(`\n.. Swap ${this.heap[1]} with last element ${this.heap[this.size]}`);

The message to show that the minimum element has been removed followed by the content of the heap may look like this:

console.log(`.. Removed ${min} from heap`, this.heap);

Checkpoint 4 Passed
4.
Lastly, return the min variable in .popMin().

Checkpoint 5 Passed
5.
Open script.js and run the test code.
