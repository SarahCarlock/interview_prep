Introduction
Trees are wonderful data structures that can model real life hierarchical information, including organizational charts, genealogical trees, computer file systems, HTML elements on a web page (also known as the Document Object Model, or DOM), state diagrams, and more.

A tree is composed of tree nodes. A tree node is a very simple data structure that contains:

Data
A list of children, where each child is itself a tree node
We can add data to and remove data from a tree and traverse it in two different ways:

Depth-first, or
Breadth-first
In this lesson, we’re going to implement the tree node data structure as a class in JavaScript.

Instructions
Checkpoint 1 Passed
1.
In TreeNode.js, you will find an empty TreeNode class. We will maintain the children of TreeNode as a JavaScript array. This will make it easier to add and remove a child.

Define a constructor that takes one parameter, data. Inside the constructor:

define a data class property and assign it to the parameter, data
define a children class property and assign it to an empty array.
Checkpoint 2 Passed
2.
Open script.js, instantiate a TreeNode class with argument of 1 and assign it to a const variable tree.

Display the contents of tree with console.log.




Adding a Child
The next task is to add a child to our tree. Each child in our children array has to be an instance of a TreeNode, however we want to allow our user interface to accept adding data in other forms as well.

For instance, if our method to add a child is .addChild(), we want to accommodate calling tree.addChild(3) as well as tree.addChild(new TreeNode(3)).

Instructions
Checkpoint 1 Passed
1.
Below the constructor, define another method, .addChild() which takes one parameter, child.

Checkpoint 2 Passed
2.
Inside .addChild(), check if child is an instance of TreeNode. If it is, add child to the end of the children array. Otherwise, create a TreeNode instance for it before adding it to the children array.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Open script.js, and do the following:

Add a child of value 15 to the tree object.
Display the output of tree in the terminal
Checkpoint 4 Passed
4.
In script.js, do the following:

Add another child by creating a TreeNode for it with value 30
Add this child to the tree object.
Display the output of tree on the terminal





Removing a Child
Like with .addChild(), we want to provide a flexible interface for removing a child from a tree based on either its data or a TreeNode match. For example, if our method to remove a child is .removeChild(), we want to be able to execute the following:

const blue = 'blue';
const green = new TreeNode('green');
tree.addChild(blue);        // add data
tree.addChild(green);       // add TreeNode
tree.removeChild('blue');   // remove by data
tree.removeChild(green);    // remove by TreeNode

The generic steps to execute in removing a child from a tree are as follows:

If target child is an instance of TreeNode,
  Compare target child with each child in the children array
  Update the children array if target child is found
Else 
  Compare target child with each child's data in the children array
  Update the children array if target child is found
If target child is not found in the children array
  Recursively call .removeChild() for each grandchild.
Because we implemented the children as an array, we can use the array .filter() method to update children. Like with .addChild(), we can also use instanceof to check if our target child is an instance of a TreeNode.

Instructions
Checkpoint 1 Passed
1.
Define a new method, .removeChild(), that takes one parameter, childToRemove.

Checkpoint 2 Passed
2.
Inside .removeChild(), we want to remove the target child from the children array. Use the JavaScript .filter() method to filter out the elements that do not match the target child and reassign the array returned by .filter() back to the children array.

Do the following:

Call the .filter() method on the children array and supply a callback function with a single argument, child, that does the following:
If childToRemove is a TreeNode, return true if childToRemove is not equal to child, else return false.
If childToRemove is not a TreeNode, return true if childToRemove is not equal to child‘s data, else return false.
Reassign the return value of .filter() back to children.

Stuck? Get a hint
Checkpoint 3 Passed
3.
If the target child is not found in the children array, then we would have to descend another level by traversing each child in the array and repeat the process. How do we know that the target child has been removed from the children array? One way is to compare the length of the original children array with the updated children array that has been filtered.

Define a const variable called length and assign it to the length of the children array at the beginning of .removeChild() before the filtering.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Compare length with the updated children‘s length after filtering. If they are the same, recursively call .removeChild() for each child in the children array.


Stuck? Get a hint
Checkpoint 5 Passed
5.
Now that we have completed implementing .removeChild(), let’s test it. Open script.js. A sample tree has been created for you and two children added, one by data and the other by TreeNode.

Do the following:

Display the output of the tree.
Remove the element in the tree by data and display the tree.
Remove the element in the tree by TreeNode and display the tree.




Depth-first Tree Traversal
Now that we can add nodes to our tree, the next step is to be able to traverse the tree and display its content. We can do this in one of two ways: depth-first or breadth-first.

Depth-first traversal visits the first child in the children array and that node’s children recursively before visiting its siblings and their children recursively. The algorithm is as follows:

For each node
  Display its data
  For each child in children, call itself recursively
Based on this tree displayed using .print():

15
-- 3
-- -- 6
-- -- 9
-- 12
-- -- 19
-- -- 8
-- 0
-- -- 10
-- -- 19
we can traverse it depth-wise to produce this result:

15
3
6
9
12
19
8
0
10
19
Instructions
Checkpoint 1 Passed
1.
In TreeNode.js, define a method, .depthFirstTraversal() below .print() that takes no parameters.

Checkpoint 2 Passed
2.
Inside .depthFirstTraversal(), display the data of the current node with console.log.

Checkpoint 3 Passed
3.
For each child in the children array, call .depthFirstTraversal() recursively.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Open script.js. Do the following:

Display the sample tree provided using the .print() method.
Then, traverse the sample tree using the traversal method you have just created.
Run the script.
Study the results by comparing the output from .print() and .depthFirstTraversal(). Did you notice anything particular about the ordering of data from both methods?




Breadth-first Tree Traversal
Breadth-first traversal visits each child in the children array starting from the first child before visiting their children and further layers until the bottom level is visited. The algorithm is as follows:

Assign an array to contain the current root node
While the array is not empty
  Extract the first tree node from the array
  Display tree node's data
  Append tree node's children to the array
Based on this tree displayed using .print():

15
-- 3
-- -- 6
-- -- 9
-- 12
-- -- 19
-- -- 8
-- 0
-- -- 10
-- -- 19
we can traverse it breadth-wise to produce this result:

15
3
12
0
6
9
19
8
10
19
Let’s implement our breadth-first traversal for TreeNode.

Instructions
Checkpoint 1 Passed
1.
Create a new method, .breadthFirstTraversal(), below .depthFirstTraversal() which takes no parameters.

Checkpoint 2 Passed
2.
Inside .breadthFirstTraversal(), declare a let variable, queue and assign it to an array that contains the current node as its only element.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Create a while loop evaluating if queue is not empty.


Stuck? Get a hint
Checkpoint 4 Passed
4.
Inside the while loop, extract the first element inside queue and assign it to a const variable, current. We do this so that we can display its data afterwards.

Log the data that belongs to current.


Stuck? Get a hint
Checkpoint 5 Passed
5.
While still inside the while loop, merge the current tree node’s children to the queue and reassign the merger to queue. We do this so that we can traverse the current node’s children after we finish traversing its siblings.


Stuck? Get a hint
Checkpoint 6 Passed
6.
Open script.js. Do the following:

Display the sample tree provided using the pretty print method.
Then, traverse the sample tree using the traversal method you have just created.
Run the script.
Study the results by comparing the output from .print() and .breadthFirstTraversal().




Review
In this lesson, you have successfully built a tree data structure in JavaScript. You have implemented:

a TreeNode class that contains data and maintains a collection of TreeNode classes called children.
an .addChild() method that adds a child to the tree as either data or TreeNode
a .removeChild() method that removes a child from the tree as either data or TreeNode
a .depthFirstTraversal() recursive method that fully traverses the tree with a top-down approach for each child of the tree
a .breadthFirstTraversal() iterative method that fully traverses the tree a level at a time, instead of a child at a time
Congratulations!!

Instructions
Checkpoint 1 Passed
1.
In this exercise, we’ve constructed a sample menu tree, however some of the meal items are in the wrong category. Can you spot which ones and place them in the correct locations?

Open script.js and run it. You will see a pretty printout of the menu tree.

Menu
-- Breakfast
-- -- Cereal
-- -- BBQ Chicken
-- -- Oatmeal
-- Lunch
-- -- Soup
-- -- Sandwich
-- -- Lasagna
-- Dinner
-- -- Yogurt
-- -- Filet Mignon
-- -- Fish Florentine
Checkpoint 2 Passed
2.
Two entries in the menu tree are dislocated. Write code to move each one to the correct location. Print the tree under the title Corrected Menu.


Stuck? Get a hint
Checkpoint 3 Passed
3.
Choose a tree traversal method whose output resembles the ordering of .print() and call it.